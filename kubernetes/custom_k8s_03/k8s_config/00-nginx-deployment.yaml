apiVersion: apps/v1
#Type of resource we want to deploy:
kind: Deployment
metadata:
  name: py-app
  #Specifying a label here allows OTHER resources to find and use this deployment (e.g., a service, ingress, or pod)
  labels:
    app: py-app
#spec for the DEPLOYMENT
spec:
  #how many node replicas we want:
  replicas: 2
  #selector is telling K8s that this deployment is tied to other resources
  #In this cases (and seemingly in most cases) this is just done through 'matchLabels' and an arbitrary key-value pair
  selector:
    matchLabels:
      app: py-app
  #template is the blueprint for the POD
  template:
    metadata:
      labels:
        app: py-app
    spec:
      containers:
      #Only specifying one container
      - name: py-app
        image: k8s_image:v1
        #This forces Minikube to ignore remote docker image repos
        #Then, we need to configure minikube so it can see local images:
        #1. Point shell to minikube's docker-daemon: `eval $(minikube -p minikube docker-env)`
        #2. Re-build docker image `docker build ./path/here -t image_name:version
        imagePullPolicy: Never
        ports:
        - containerPort: 5000
